{"version":3,"sources":["components/iconGenerator.jsx","App.js","serviceWorker.js","index.js"],"names":["componentName","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateHtmlTags","iconName","url","createAllIconsAndHyperLinks","outputHtml","index","state","iconsToGenerate","length","urlsToLink","console","log","react_default","a","createElement","dangerouslySetInnerHTML","__html","Component","App","componentWillMount","checkIfPlainTypeEnabled","checkIfGradientTypeEnabled","setState","appClass","bgStyle","prepareGradientStyleSheets","checkIfImageTypeEnabled","prepareBackgroundImageStyle","checkIfNightModeEnabled","backgroundType","checkIfDayModeEnabled","Configs","gradientColors","background","backgroundSize","backgroundImageUrl","getDefaultModeBasedOnBackgroundType","lightBackgroundModes","darkBackgroundModes","changeThemeMode","e","backgroundIndex","backgroundMode","changeBackgroundBasedonMode","plainBackgroundMode","devIntro","devDesc","className","style","onClick","Typist_default","iconGenerator_componentName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1dd64518.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class componentName extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      iconsToGenerate: props.iconsToGenerate,\r\n      urlsToLink: props.urlsToLink\r\n    };\r\n  }\r\n\r\n  generateHtmlTags = (iconName, url) => {\r\n    return (\r\n      '<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"' +\r\n      url +\r\n      '\"><i class=\"fab ' +\r\n      iconName +\r\n      '\"></i></a>'\r\n    );\r\n  };\r\n\r\n  createAllIconsAndHyperLinks = () => {\r\n    let outputHtml = '';\r\n    for (let index = 0; index < this.state.iconsToGenerate.length; index++) {\r\n      outputHtml +=\r\n        this.generateHtmlTags(\r\n          this.state.iconsToGenerate[index],\r\n          this.state.urlsToLink[index]\r\n        ) + '\\n';\r\n    }\r\n    console.log(outputHtml);\r\n    return outputHtml;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        dangerouslySetInnerHTML={{ __html: this.createAllIconsAndHyperLinks() }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Typist from 'react-typist';\nimport './App.css';\nimport Configs from './configurations.json';\nimport Icons from './components/iconGenerator';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      darkBackgroundModes: [\n        'day',\n        'terminal',\n        'torquoise',\n        'alizarin',\n        'amythyst',\n        'carrot',\n        'peterriver'\n      ],\n      lightBackgroundModes: [\n        'night',\n        'lightred',\n        'lightpurple',\n        'lightgreen',\n        'lightblue',\n        'lightyellow'\n      ],\n      backgroundType: Configs.backgroundType || 'plain',\n      appClass: Configs.plainBackgroundMode || 'daylight',\n      devIntro: Configs.devIntro || 'Lorem Ipsum',\n      devDesc:\n        Configs.devDesc ||\n        'Aute veniam ut deserunt cillum irure pariatur Lorem dolore anim nostrud quis veniam elit culpa.',\n      backgroundMode: 'default',\n      backgroundIndex: 0,\n      bgStyle: {},\n      iconsToGenerate: Configs.iconsToGenerate || [],\n      urlsToLink: Configs.urlsToLink || []\n    };\n  }\n\n  componentWillMount = () => {\n    if (this.checkIfPlainTypeEnabled()) {\n      return true;\n    } else if (this.checkIfGradientTypeEnabled()) {\n      this.setState({\n        appClass: 'gradient',\n        bgStyle: this.prepareGradientStyleSheets()\n      });\n    } else if (this.checkIfImageTypeEnabled()) {\n      this.setState({\n        appClass: 'full-bg-image',\n        bgStyle: this.prepareBackgroundImageStyle()\n      });\n    }\n  };\n\n  checkIfNightModeEnabled = () => {\n    return (\n      this.state.backgroundType === 'plain' &&\n      this.state.appClass === 'nightlight'\n    );\n  };\n\n  checkIfDayModeEnabled = () => {\n    return (\n      this.state.backgroundType === 'plain' &&\n      this.state.appClass === 'daylight'\n    );\n  };\n\n  checkIfGradientTypeEnabled = () => {\n    return this.state.backgroundType === 'gradient';\n  };\n\n  checkIfPlainTypeEnabled = () => {\n    return this.state.backgroundType === 'plain';\n  };\n\n  checkIfImageTypeEnabled = () => {\n    return this.state.backgroundType === 'image';\n  };\n\n  prepareGradientStyleSheets = () => {\n    if (Configs.gradientColors) {\n      return {\n        background: 'linear-gradient(-45deg, ' + Configs.gradientColors + ')',\n        backgroundSize: '400% 400%'\n      };\n    } else {\n      return {\n        background:\n          'linear-gradient(-45deg, #EE7752, #E73C7E, #23A6D5, #23D5AB)',\n        backgroundSize: '400% 400%'\n      };\n    }\n  };\n\n  prepareBackgroundImageStyle = () => {\n    if (Configs.backgroundImageUrl) {\n      return {\n        background:\n          'url(\"' +\n          Configs.backgroundImageUrl +\n          '\") no-repeat center center fixed',\n        backgroundSize: 'cover'\n      };\n    } else {\n      return {\n        background:\n          'url(\"/images/sample-background.jpg\") no-repeat center center fixed',\n        backgroundSize: 'cover'\n      };\n    }\n  };\n\n  getDefaultModeBasedOnBackgroundType = () => {\n    if (this.checkIfNightModeEnabled()) {\n      return this.state.lightBackgroundModes[0];\n    } else if (this.checkIfDayModeEnabled()) {\n      return this.state.darkBackgroundModes[0];\n    }\n  };\n\n  changeThemeMode = e => {\n    if (this.checkIfNightModeEnabled()) {\n      this.setState({\n        appClass: 'daylight',\n        backgroundIndex: 0,\n        backgroundMode: this.state.darkBackgroundModes[0]\n      });\n    } else if (this.checkIfDayModeEnabled()) {\n      this.setState({\n        appClass: 'nightlight',\n        backgroundIndex: 0,\n        backgroundMode: this.state.lightBackgroundModes[0]\n      });\n    }\n  };\n\n  changeBackgroundBasedonMode = () => {\n    if (\n      this.checkIfNightModeEnabled() &&\n      this.state.backgroundIndex < this.state.lightBackgroundModes.length - 1\n    ) {\n      this.setState({\n        backgroundIndex: this.state.backgroundIndex + 1,\n        backgroundMode: this.state.lightBackgroundModes[\n          this.state.backgroundIndex + 1\n        ]\n      });\n    } else if (\n      this.checkIfDayModeEnabled() &&\n      this.state.backgroundIndex < this.state.darkBackgroundModes.length - 1\n    ) {\n      this.setState({\n        backgroundIndex: this.state.backgroundIndex + 1,\n        backgroundMode: this.state.darkBackgroundModes[\n          this.state.backgroundIndex + 1\n        ]\n      });\n    } else {\n      this.setState({\n        backgroundIndex: 0,\n        backgroundMode: this.getDefaultModeBasedOnBackgroundType()\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className={this.state.appClass} style={this.state.bgStyle}>\n        <div className=\"change-mode\" onClick={this.changeThemeMode} />\n        <div\n          className={this.state.backgroundMode}\n          onClick={this.changeBackgroundBasedonMode}>\n          <main className=\"App-main\">\n            <h1 className=\"intro\"> {this.state.devIntro} </h1>\n            <div className=\"tagline\">\n              <Typist> {this.state.devDesc} </Typist>\n            </div>\n            <div className=\"icons-social\">\n              <Icons\n                iconsToGenerate={this.state.iconsToGenerate}\n                urlsToLink={this.state.urlsToLink}\n              />\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}